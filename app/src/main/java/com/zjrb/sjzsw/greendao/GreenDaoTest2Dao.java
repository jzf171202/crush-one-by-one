package com.zjrb.sjzsw.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.zjrb.sjzsw.entity.GreenDaoTest2;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GREEN_DAO_TEST2".
*/
public class GreenDaoTest2Dao extends AbstractDao<GreenDaoTest2, Long> {

    public static final String TABLENAME = "GREEN_DAO_TEST2";

    /**
     * Properties of entity GreenDaoTest2.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Pid = new Property(2, Long.class, "pid", false, "PID");
    }

    private Query<GreenDaoTest2> greenDaoTest_GreenDaoTest2ListQuery;

    public GreenDaoTest2Dao(DaoConfig config) {
        super(config);
    }
    
    public GreenDaoTest2Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GREEN_DAO_TEST2\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"PID\" INTEGER);"); // 2: pid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GREEN_DAO_TEST2\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GreenDaoTest2 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Long pid = entity.getPid();
        if (pid != null) {
            stmt.bindLong(3, pid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GreenDaoTest2 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Long pid = entity.getPid();
        if (pid != null) {
            stmt.bindLong(3, pid);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GreenDaoTest2 readEntity(Cursor cursor, int offset) {
        GreenDaoTest2 entity = new GreenDaoTest2( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // pid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GreenDaoTest2 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPid(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GreenDaoTest2 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GreenDaoTest2 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GreenDaoTest2 entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "greenDaoTest2List" to-many relationship of GreenDaoTest. */
    public List<GreenDaoTest2> _queryGreenDaoTest_GreenDaoTest2List(Long pid) {
        synchronized (this) {
            if (greenDaoTest_GreenDaoTest2ListQuery == null) {
                QueryBuilder<GreenDaoTest2> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Pid.eq(null));
                greenDaoTest_GreenDaoTest2ListQuery = queryBuilder.build();
            }
        }
        Query<GreenDaoTest2> query = greenDaoTest_GreenDaoTest2ListQuery.forCurrentThread();
        query.setParameter(0, pid);
        return query.list();
    }

}
