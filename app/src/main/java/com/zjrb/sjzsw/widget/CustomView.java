package com.zjrb.sjzsw.widget;import android.content.Context;import android.support.annotation.Nullable;import android.util.AttributeSet;import android.util.Log;import android.view.MotionEvent;import android.view.VelocityTracker;import android.view.View;import android.view.ViewConfiguration;/** * 类描述：自定义view实战 * * @author jinzifu * @Email jinzifu123@163.com * @date 2018/2/26 2107 */public class CustomView extends View {    private static final String TAG = "CustomView";    private int mLastX, mLastY;    public CustomView(Context context) {        super(context);        init(context, null, -1);    }    public CustomView(Context context, @Nullable AttributeSet attrs) {        super(context, attrs);        init(context, attrs, -1);    }    public CustomView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {        super(context, attrs, defStyleAttr);        init(context, attrs, defStyleAttr);    }    /**     * 初始化     *     * @param context     * @param attrs     * @param defStyleAttr     */    private void init(Context context, AttributeSet attrs, int defStyleAttr) {       int touchSlop = ViewConfiguration.get(context).getScaledTouchSlop();    }    @Override    public boolean onTouchEvent(MotionEvent event) {        return super.onTouchEvent(event);    }    /**     * 拖动view     *     * @param event     */    private void dragView(MotionEvent event) {        int rawX = (int) event.getRawX();        int rawY = (int) event.getRawY();        switch (event.getAction()) {            case MotionEvent.ACTION_DOWN:                mLastX = (int) event.getRawX();                mLastY = (int) event.getRawY();                break;            case MotionEvent.ACTION_MOVE:                int offsetX = rawX - mLastX;                int offsetY = rawY - mLastY;                layout(getLeft() + offsetX, getTop() + offsetY, getRight() + offsetX, getBottom() + offsetY);                break;            case MotionEvent.ACTION_UP:                break;            default:                break;        }        mLastX = rawX;        mLastY = rawY;    }    /**     * 追踪手指在该view中滑动速度     *     * @param event     */    private void getVelocity(MotionEvent event) {        VelocityTracker velocityTracker = VelocityTracker.obtain();        velocityTracker.addMovement(event);        velocityTracker.computeCurrentVelocity(100);        int xVelocity = (int) velocityTracker.getXVelocity();        int yVelocity = (int) velocityTracker.getYVelocity();        Log.d(TAG, "xVelocity = " + xVelocity + "; yVelocity = " + yVelocity);    }}